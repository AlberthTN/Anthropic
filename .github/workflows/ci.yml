name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'

jobs:
  # 🧪 Testing Job
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock
        pip install flake8 black isort mypy bandit safety
        pip install coverage[toml] codecov

    - name: 🔍 Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: 🎨 Check Code Formatting (Black)
      run: |
        black --check --diff src/ tests/

    - name: 📋 Check Import Sorting (isort)
      run: |
        isort --check-only --diff src/ tests/

    - name: 🔍 Type Check (mypy)
      run: |
        mypy src/ --ignore-missing-imports --strict-optional

    - name: 🔒 Security Check (Bandit)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium

    - name: 🛡️ Dependency Security Check (Safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: 🧪 Run Tests with Coverage
      env:
        # Mock environment variables for testing
        ANTHROPIC_API_KEY: test_key_12345
        CLAUDE_MODEL: claude-3-sonnet-20240229
        SLACK_BOT_TOKEN: xoxb-test-token
        SLACK_APP_TOKEN: xapp-test-token
        SLACK_SIGNING_SECRET: test_signing_secret
        APP_NAME: claude-agent-test
        WEBHOOK_PORT: 8080
        DEBUG_MODE: true
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-report=html \
          --junit-xml=pytest-report.xml \
          --maxfail=5 \
          -v

    - name: 📊 Upload Coverage to Codecov
      if: matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: 📋 Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.os }}
        path: |
          pytest-report.xml
          coverage.xml
          htmlcov/
          bandit-report.json
          safety-report.json

  # 🐳 Docker Build Job
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to DockerHub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 📋 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/claude-programming-agent
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

    - name: 🧪 Test Docker Image
      run: |
        docker run --rm \
          -e ANTHROPIC_API_KEY=test_key \
          -e SLACK_BOT_TOKEN=test_token \
          -e SLACK_APP_TOKEN=test_app_token \
          -e SLACK_SIGNING_SECRET=test_secret \
          ${{ steps.meta.outputs.tags }} \
          python -c "import src.agents.claude_agent; print('✅ Docker image works!')"

  # 📊 Code Quality Job
  quality:
    name: 📊 Code Quality
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install radon xenon vulture

    - name: 📈 Calculate Code Metrics
      run: |
        echo "## 📊 Code Quality Metrics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Cyclomatic Complexity
        echo "### 🔄 Cyclomatic Complexity" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        radon cc src/ -a -s >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Maintainability Index
        echo "### 🛠️ Maintainability Index" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        radon mi src/ -s >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Raw Metrics
        echo "### 📏 Raw Metrics" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        radon raw src/ -s >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: 🔍 Dead Code Detection
      run: |
        echo "### 💀 Dead Code Detection" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        vulture src/ --min-confidence 80 >> $GITHUB_STEP_SUMMARY || true
        echo '```' >> $GITHUB_STEP_SUMMARY

  # 🚀 Deploy Job (only on main branch)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [test, docker, quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Production
      run: |
        echo "🚀 Deploying to production..."
        echo "✅ Deployment completed successfully!"
        # Add actual deployment steps here
        # Example: kubectl apply, docker-compose up, etc.

    - name: 📢 Notify Deployment
      if: always()
      run: |
        echo "📢 Deployment notification sent"
        # Add notification logic here (Slack, email, etc.)

  # 🏷️ Release Job (only on tags)
  release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📋 Generate Changelog
      id: changelog
      run: |
        # Generate changelog from commits
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🏷️ Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: 🚀 Claude Programming Agent ${{ github.ref_name }}
        body: |
          ## 🎉 What's New in ${{ github.ref_name }}
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## 🚀 Quick Start
          
          ```bash
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/claude-programming-agent:${{ github.ref_name }}
          ```
          
          ## 📚 Documentation
          
          - [Installation Guide](INSTALLATION.md)
          - [API Documentation](API_DOCUMENTATION.md)
          - [Deployment Guide](DEPLOYMENT.md)
          
          ## 🤝 Contributing
          
          See [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

# 📊 Job Summary
jobs-summary:
  name: 📊 Pipeline Summary
  runs-on: ubuntu-latest
  needs: [test, docker, quality]
  if: always()

  steps:
  - name: 📊 Generate Summary
    run: |
      echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
      echo "" >> $GITHUB_STEP_SUMMARY
      echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
      echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
      echo "| 🧪 Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
      echo "| 🐳 Docker | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
      echo "| 📊 Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
      echo "" >> $GITHUB_STEP_SUMMARY
      
      if [[ "${{ needs.test.result }}" == "success" && "${{ needs.docker.result }}" == "success" && "${{ needs.quality.result }}" == "success" ]]; then
        echo "✅ **All checks passed!** Ready to merge." >> $GITHUB_STEP_SUMMARY
      else
        echo "❌ **Some checks failed.** Please review and fix issues." >> $GITHUB_STEP_SUMMARY
      fi